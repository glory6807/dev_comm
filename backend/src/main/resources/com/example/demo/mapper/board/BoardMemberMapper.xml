<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="com.example.demo.mapper.board.BoardMemberMapper"> 
    <select id="selectBoardList" parameterType="com.example.demo.vo.board.BoardMemberVo" resultType="com.example.demo.vo.board.BoardMemberVo"> 
    
        SELECT BOARD_NO
              ,BOARD_TTL
            <![CDATA[
              ,LEFT(REGEXP_REPLACE(BOARD_CNTN, '<(/)?(img|label|table|thead|tbody|tfoot|tr|td|p|br|div|span|font|strong|b)(.|\s|\t|\n|\r\n)*?>', ''),200) AS BOARD_CNTN
            ]]>
              ,CRT_DT
              ,MOD_DT
              ,REG_MEM_ID
              ,IS_DEL
              ,(SELECT COUNT(BOARD_NO)
                  FROM BOARD_MEM
                 WHERE IS_DEL = 'N') AS TOT_CNT
          FROM BOARD_MEM
         WHERE IS_DEL = 'N' 
    <if test='searchCondition != null and searchCondition != "" and searchCode == "ALL"'>
           AND (   UPPER(BOARD_TTL)  LIKE CONCAT('%', UPPER(#{searchCondition}), '%') 
                OR UPPER(REG_MEM_ID) LIKE CONCAT('%', UPPER(#{searchCondition}), '%') 
                OR UPPER(BOARD_CNTN) LIKE CONCAT('%', UPPER(#{searchCondition}), '%') )
    </if>
    <if test='searchCondition != null and searchCondition != "" and searchCode == "TTL"'>
           AND UPPER(BOARD_TTL) LIKE CONCAT('%', UPPER(#{searchCondition}), '%') 
    </if>
    <if test='searchCondition != null and searchCondition != "" and searchCode == "MEM"'>
           AND UPPER(REG_MEM_ID) LIKE CONCAT('%', UPPER(#{searchCondition}), '%') 
    </if>
      ORDER BY MOD_DT DESC
      LIMIT #{startPage}, #{pageSize}
    </select> 

    <select id="selectBoardDtl" resultType="com.example.demo.vo.board.BoardMemberVo">
        SELECT BOARD_NO
              ,BOARD_TTL
              ,BOARD_CNTN
              ,CRT_DT
              ,MOD_DT
              ,REG_MEM_ID
              ,IS_DEL
              ,(SELECT COUNT(BOARD_NO)
                  FROM BOARD_MEM
                 WHERE IS_DEL = 'N')
          FROM BOARD_MEM
         WHERE IS_DEL = 'N'
           AND BOARD_NO = #{boardNo}
    </select>

    <insert id="insertBoardDtl" parameterType="com.example.demo.vo.board.BoardMemberVo">
        <selectKey keyProperty="boardNoProperty" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT IGNORE INTO BOARD_MEM (
                                BOARD_NO
                               ,BOARD_TTL
                               ,BOARD_CNTN
                               ,CRT_DT
                               ,MOD_DT
                               ,REG_MEM_ID
                               ,IS_DEL
                              )
                      VALUES (
                               #{boardNo}
                               ,#{boardTtl}
                               ,#{boardCntn}
                               ,NOW()
                               ,NOW()
                               ,#{regMemId}
                               ,'N'
                             )
        ON DUPLICATE KEY UPDATE BOARD_NO = #{boardNo}
                                ,BOARD_TTL = #{boardTtl}
                                ,BOARD_CNTN = #{boardCntn}
                                ,MOD_DT = NOW()
                                ,IS_DEL = 'N'
    </insert>

    <select id="selectReply" resultType="com.example.demo.vo.reply.ReplyVo">
        WITH RECURSIVE CTE AS (
            SELECT A.REPLY_NO
                ,A.BOARD_NO
                ,A.REPLY_CNTN
                ,A.UP_REPLY_NO
                ,A.IS_DEL
                ,A.REG_MEM_ID
                ,A.CRT_DT 
                ,A.MOD_DT
                ,CAST(REPLY_NO AS CHAR(100)) AS LEVEL
                ,0 AS DEPTH_LEVEL
            FROM REPLY_MEM A
           WHERE A.UP_REPLY_NO IS NULL
            AND A.BOARD_NO = #{boardNo}
        UNION ALL
            SELECT B.REPLY_NO
                ,B.BOARD_NO
                ,B.REPLY_CNTN
                ,B.UP_REPLY_NO
                ,B.IS_DEL
                ,B.REG_MEM_ID
                ,B.CRT_DT 
                ,B.MOD_DT
                ,CONCAT(C.LEVEL, ",", B.REPLY_NO) AS LEVEL
                ,DEPTH_LEVEL + 1 AS DEPTH_LEVEL
            FROM REPLY_MEM B
      INNER JOIN CTE C ON B.UP_REPLY_NO = C.REPLY_NO
           WHERE B.BOARD_NO = #{boardNo}
        )
        SELECT C.REPLY_NO
              ,C.BOARD_NO
              ,CASE WHEN C.IS_DEL = 'Y' THEN '(삭제된 댓글입니다.)'
                    ELSE C.REPLY_CNTN
               END AS REPLY_CNTN
              ,C.IS_DEL
              ,C.UP_REPLY_NO
              ,C.REG_MEM_ID
              ,C.CRT_DT
              ,C.MOD_DT
              ,C.LEVEL
              ,C.DEPTH_LEVEL
          FROM CTE C
      ORDER BY LEVEL
    </select>

    <select id="selectReplyMore" resultType="com.example.demo.vo.board.BoardMemberVo">
        SELECT  CONCAT(REPEAT('    ', level - 1), CAST(HI.REPLY_NO AS CHAR)) AS treeitem, UP_REPLY_NO, level
        FROM    (
                SELECT  hierarchy_connect_by_parent_eq_prior_id(REPLY_NO) AS REPLY_NO, @level AS level
                FROM    (
                        SELECT  @start_with := 6142,
                                @id := @start_with,
                                @level := 0
                        ) vars
                        , REPLY_MEM A
                WHERE   @id IS NOT NULL
                ) HO
        JOIN    REPLY_MEM HI
        ON      HI.REPLY_NO = HO.REPLY_NO
    </select>

    <insert id="insertReply" parameterType="com.example.demo.vo.reply.ReplyVo">
        INSERT INTO REPLY_MEM(
                                BOARD_NO
                               ,REPLY_CNTN
                               ,UP_REPLY_NO
                               ,DEPTH
                               ,IS_DEL
                               ,REG_MEM_ID
                               ,CRT_DT
                               ,MOD_DT
                              )
                        VALUES(
                                #{boardNo}
                               ,#{replyCntn}
                               ,#{upReplyNo}
                               ,'1'
                               ,'N'
                               ,#{regMemId}
                               ,NOW()
                               ,NOW()
                              )
    </insert>

    <update id="deleteReply" parameterType="com.example.demo.vo.reply.ReplyVo">
        UPDATE REPLY_MEM
           SET IS_DEL = 'Y'
         WHERE REPLY_NO = #{replyNo}
    </update>

    <update id="updateReply" parameterType="com.example.demo.vo.reply.ReplyVo">
        UPDATE REPLY_MEM
           SET REPLY_CNTN = #{replyCntn}
              ,MOD_DT = NOW()
         WHERE REPLY_NO = #{replyNo}
    </update>
</mapper>